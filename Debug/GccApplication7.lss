
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000907  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076f  00000000  00000000  00000cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003be  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041d  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8e:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUSART>:
uint8_t  usart_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	e2 ec       	ldi	r30, 0xC2	; 194
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <usart_Transmit>:
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <usart_Transmit+0x4>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	08 95       	ret

000000c2 <usart_Message>:

void usart_Message(uint8_t* msg){
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	
	while(*msg){
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <usart_Message+0x18>
  ce:	21 96       	adiw	r28, 0x01	; 1
		usart_Transmit(*msg);
  d0:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
	
}

void usart_Message(uint8_t* msg){
	
	while(*msg){
  d4:	89 91       	ld	r24, Y+
  d6:	81 11       	cpse	r24, r1
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <usart_Message+0xe>
		msg ++;
		
	}
	
	
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <initADC>:
//###########################################################################
void initADC(void)
{
	// AV CC with external capacitor at AREF pin
	ADMUX |= (1<<REFS0);
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 68       	ori	r24, 0x87	; 135
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <readADC>:
}

uint16_t readADC(uint8_t ADCchannel){
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	89 2b       	or	r24, r25
 102:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);//start conversation
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	//Wait until ADC converstain complete. ADSC will be ZERO after completion.
	while(ADCSRA & (1<<ADSC));
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <readADC+0x18>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
}
 11c:	08 95       	ret

0000011e <main>:
	uint16_t voltage;
	uint8_t val1, val2,val3,temperature;
	//DDRD |= (1 << PD1);  //TX as an output (PD1)
	//DDRD &= ~(1 << PD0);
	//DDRB |= (1 << PB0);
	initUSART();
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <initUSART>
	initADC();
 122:	0e 94 70 00 	call	0xe0	; 0xe0 <initADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	9c e0       	ldi	r25, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xe>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x18>
 136:	00 00       	nop
	_delay_ms(500);
	usart_Message("LM35 Temperature Sensor\n\r");
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
		voltage = readADC(ADC0);
		voltage = ((T*voltage)/10) + 2;
		
		if (voltage >= 100){
			val1 = voltage / 100;
			val2 = voltage % 100;
 140:	04 e6       	ldi	r16, 0x64	; 100
			val3 = val2 % 10;
 142:	1d ec       	ldi	r17, 0xCD	; 205
	initADC();
	_delay_ms(500);
	usart_Message("LM35 Temperature Sensor\n\r");
	//  usart_Init();
	while(1){
		voltage = readADC(ADC0);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <readADC>
		voltage = ((T*voltage)/10) + 2;
 14a:	9c 01       	movw	r18, r24
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	ac 01       	movw	r20, r24
 16a:	4e 5f       	subi	r20, 0xFE	; 254
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if (voltage >= 100){
 16e:	44 36       	cpi	r20, 0x64	; 100
 170:	51 05       	cpc	r21, r1
 172:	38 f1       	brcs	.+78     	; 0x1c2 <main+0xa4>
			val1 = voltage / 100;
 174:	9a 01       	movw	r18, r20
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	ab e7       	ldi	r26, 0x7B	; 123
 180:	b4 e1       	ldi	r27, 0x14	; 20
 182:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 186:	9c 01       	movw	r18, r24
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	82 2f       	mov	r24, r18
			val2 = voltage % 100;
 18e:	02 9f       	mul	r16, r18
 190:	b0 01       	movw	r22, r0
 192:	03 9f       	mul	r16, r19
 194:	70 0d       	add	r23, r0
 196:	11 24       	eor	r1, r1
 198:	46 1b       	sub	r20, r22
 19a:	57 0b       	sbc	r21, r23
			val3 = val2 % 10;
 19c:	41 9f       	mul	r20, r17
 19e:	d1 2d       	mov	r29, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	cd 2f       	mov	r28, r29
 1a4:	c6 95       	lsr	r28
 1a6:	c6 95       	lsr	r28
 1a8:	c6 95       	lsr	r28
 1aa:	cc 0f       	add	r28, r28
 1ac:	9c 2f       	mov	r25, r28
 1ae:	99 0f       	add	r25, r25
 1b0:	99 0f       	add	r25, r25
 1b2:	c9 0f       	add	r28, r25
 1b4:	24 2f       	mov	r18, r20
 1b6:	2c 1b       	sub	r18, r28
 1b8:	c2 2f       	mov	r28, r18
			val2 = val2 / 10;
 1ba:	d6 95       	lsr	r29
 1bc:	d6 95       	lsr	r29
 1be:	d6 95       	lsr	r29
 1c0:	1a c0       	rjmp	.+52     	; 0x1f6 <main+0xd8>
		}
		else{
			val1 = 0;
			val2 = voltage / 10;
 1c2:	9a 01       	movw	r18, r20
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	d8 2f       	mov	r29, r24
			val3 = voltage % 10;
 1da:	9c 01       	movw	r18, r24
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	c4 2f       	mov	r28, r20
 1f2:	c8 1b       	sub	r28, r24
			val2 = voltage % 100;
			val3 = val2 % 10;
			val2 = val2 / 10;
		}
		else{
			val1 = 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
			val2 = voltage / 10;
			val3 = voltage % 10;
		}
		//Decimal 48=0 Decimal 49=1  Decimal 50 =2 For more information see ASCII table.
		
		usart_Transmit(val1 + 48);
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val2 + 48);
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	8d 0f       	add	r24, r29
 200:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val3 + 48);
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	8c 0f       	add	r24, r28
 208:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit('C');
 20c:	83 e4       	ldi	r24, 0x43	; 67
 20e:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit('\n');
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit('\r');
 218:	8d e0       	ldi	r24, 0x0D	; 13
 21a:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	93 ed       	ldi	r25, 0xD3	; 211
 222:	20 e3       	ldi	r18, 0x30	; 48
 224:	81 50       	subi	r24, 0x01	; 1
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	20 40       	sbci	r18, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x106>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x110>
 22e:	00 00       	nop
 230:	89 cf       	rjmp	.-238    	; 0x144 <main+0x26>

00000232 <__umulhisi3>:
 232:	a2 9f       	mul	r26, r18
 234:	b0 01       	movw	r22, r0
 236:	b3 9f       	mul	r27, r19
 238:	c0 01       	movw	r24, r0
 23a:	a3 9f       	mul	r26, r19
 23c:	70 0d       	add	r23, r0
 23e:	81 1d       	adc	r24, r1
 240:	11 24       	eor	r1, r1
 242:	91 1d       	adc	r25, r1
 244:	b2 9f       	mul	r27, r18
 246:	70 0d       	add	r23, r0
 248:	81 1d       	adc	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	91 1d       	adc	r25, r1
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
